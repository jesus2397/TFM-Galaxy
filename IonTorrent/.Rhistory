prom=cor(dist(comp),cophenetic(leukemia_prom))
#Ahora se comparan:
best=data.frame(single,complete,ward,center,prom)
round(best,2)
head(leukemia_cercano$height)
head(leukemia_centro$height)
head(leukemia_Ward$height)
head(leukemia_prom$height)
#Como se observa, las distancias mínimas son las mismas para todos
#Ahora se representan los dendrograms
o=par(mflow=c(2,1))
plot(leukemia_cercano, cex=0.5, hang=-1, col=1, ylab="distancia", xlab =
"Individuos", main = "Cluster vecino cercano")
abline(abline(h=0.7190847, col="blue"))
plot(leukemia_centro, cex=0.5, hang=-1, col=1, ylab="distancia", xlab =
"Individuos", main = "Cluster centroide")
abline(abline(h=0.7190847, col="blue"))
plot(leukemia_Ward, cex=0.5, hang=-1, col=1, ylab="distancia", xlab =
"Individuos", main = "Cluster Ward")
abline(abline(h=0.7190847, col="blue"))
plot(leukemia_prom, cex=0.5, hang=-1, col=1, ylab="distancia", xlab =
"Individuos", main = "Cluster Average")
abline(abline(h=0.7190847, col="blue"))
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
library(dendextend) #Librería necesaria para realizar el tanglegrama.
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
```{r fig.height=7 width}
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
library(dendextend) #Librería necesaria para realizar el tanglegrama.
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_Ward, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_centro, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_cercano, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_Ward, main_left = "Jerarquía complete", main_right = "Jerarquía average")
tanglegram(leukemia_lejano, leukemia_prom, main_left = "Jerarquía complete", main_right = "Jerarquía average")
options = matrix(c("otuphylfile","o",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
p <- suppressMessages(psmelt(otuphylNorm))
p$Abundance <- p$Abundance*100
p <- suppressMessages(p %>% mutate(menor01 = ifelse(Abundance<1, 1, 0)) %>%
mutate(newOTU = ifelse(menor01 == 1, "ETC<1%", OTU) ) %>%
group_by(newOTU, group, Sample) %>% summarise(Abundance2 = sum(Abundance)))
names(p) <- c("OTU","group","Sample", "Abundance")
colores <- c('#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf')
colorRamps <- scales::colour_ramp(colores)
coloresRamp <- colorRamps(seq(0,1,length=length(unique(p$OTU)) ))
p %>% ggplot(aes_string(x = "Sample", y="Abundance", fill="OTU")) +
geom_bar(stat = "identity", position = "stack",
color = "black", show.legend = T, width = 0.5, size=0.01 ) +
theme_bw() +
scale_fill_manual(values= coloresRamp ) +
theme(axis.text.x = element_text(angle = 90),
legend.position = "bottom",
text = element_text(size=10),
legend.key.size = unit(0.3, "cm") ) +
ylab("Abundance (%)")+
guides(fill = guide_legend(ncol=3)) +
facet_wrap(~group, scales = "free_x", ncol = 3)
png(filename = "barplot_sample_and_group.png", width = 1200, height = 1200)
print(p)
pkgs <- c("ggplot2","dplyr","tidyr", "getopt","limma","tibble","phyloseq")
for (pkg in pkgs) suppressPackageStartupMessages(stopifnot(library(pkg, quietly = TRUE, logical.return = TRUE, character.only = TRUE)))
options = matrix(c("otuphylfile","o",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
p <- suppressMessages(psmelt(otuphylNorm))
p$Abundance <- p$Abundance*100
p <- suppressMessages(p %>% mutate(menor01 = ifelse(Abundance<1, 1, 0)) %>%
mutate(newOTU = ifelse(menor01 == 1, "ETC<1%", OTU) ) %>%
group_by(newOTU, group, Sample) %>% summarise(Abundance2 = sum(Abundance)))
names(p) <- c("OTU","group","Sample", "Abundance")
colores <- c('#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf')
colorRamps <- scales::colour_ramp(colores)
coloresRamp <- colorRamps(seq(0,1,length=length(unique(p$OTU)) ))
p %>% ggplot(aes_string(x = "Sample", y="Abundance", fill="OTU")) +
geom_bar(stat = "identity", position = "stack",
color = "black", show.legend = T, width = 0.5, size=0.01 ) +
theme_bw() +
scale_fill_manual(values= coloresRamp ) +
theme(axis.text.x = element_text(angle = 90),
legend.position = "bottom",
text = element_text(size=10),
legend.key.size = unit(0.3, "cm") ) +
ylab("Abundance (%)")+
guides(fill = guide_legend(ncol=3)) +
facet_wrap(~group, scales = "free_x", ncol = 3)
png(filename = "barplot_sample_and_group.png", width = 1200, height = 1200)
print(p)
pkgs <- c("ggplot2","dplyr","tidyr", "getopt","limma","tibble","phyloseq")
for (pkg in pkgs) suppressPackageStartupMessages(stopifnot(library(pkg, quietly = TRUE, logical.return = TRUE, character.only = TRUE)))
options = matrix(c("otuphylfile","o",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
p <- suppressMessages(psmelt(otuphylNorm))
p$Abundance <- p$Abundance*100
p <- suppressMessages(p %>% mutate(menor01 = ifelse(Abundance<1, 1, 0)) %>%
mutate(newOTU = ifelse(menor01 == 1, "ETC<1%", OTU) ) %>%
group_by(newOTU, group, Sample) %>% summarise(Abundance2 = sum(Abundance)))
names(p) <- c("OTU","group","Sample", "Abundance")
colores <- c('#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf')
colorRamps <- scales::colour_ramp(colores)
coloresRamp <- colorRamps(seq(0,1,length=length(unique(p$OTU)) ))
p %>% ggplot(aes_string(x = "Sample", y="Abundance", fill="OTU")) +
geom_bar(stat = "identity", position = "stack",
color = "black", show.legend = T, width = 0.5, size=0.01 ) +
theme_bw() +
scale_fill_manual(values= coloresRamp ) +
theme(axis.text.x = element_text(angle = 90),
legend.position = "bottom",
text = element_text(size=10),
legend.key.size = unit(0.3, "cm") ) +
ylab("Abundance (%)")+
guides(fill = guide_legend(ncol=3)) +
facet_wrap(~group, scales = "free_x", ncol = 3)
png(filename = "barplot_sample_and_group.png", width = 1200, height = 1200)
print(p)
pkgs <- c("ggplot2","dplyr","tidyr", "getopt","limma","tibble","phyloseq")
for (pkg in pkgs) suppressPackageStartupMessages(stopifnot(library(pkg, quietly = TRUE, logical.return = TRUE, character.only = TRUE)))
options = matrix(c("otuphylfile","o",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
p <- suppressMessages(psmelt(otuphylNorm))
p$Abundance <- p$Abundance*100
p <- suppressMessages(p %>% mutate(menor01 = ifelse(Abundance<1, 1, 0)) %>%
mutate(newOTU = ifelse(menor01 == 1, "ETC<1%", OTU) ) %>%
group_by(newOTU, group, Sample) %>% summarise(Abundance2 = sum(Abundance)))
names(p) <- c("OTU","group","Sample", "Abundance")
colores <- c('#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf')
colorRamps <- scales::colour_ramp(colores)
coloresRamp <- colorRamps(seq(0,1,length=length(unique(p$OTU)) ))
p %>% ggplot(aes_string(x = "Sample", y="Abundance", fill="OTU")) +
geom_bar(stat = "identity", position = "stack",
color = "black", show.legend = T, width = 0.5, size=0.01 ) +
theme_bw() +
scale_fill_manual(values= coloresRamp ) +
theme(axis.text.x = element_text(angle = 90),
legend.position = "bottom",
text = element_text(size=10),
legend.key.size = unit(0.3, "cm") ) +
ylab("Abundance (%)")+
guides(fill = guide_legend(ncol=3)) +
facet_wrap(~group, scales = "free_x", ncol = 3)
png(filename = "barplot_sample_and_group.png", width = 1200, height = 1200)
print(p)
pkgs <- c("ggplot2","dplyr","tidyr", "getopt","limma","tibble","phyloseq")
for (pkg in pkgs) suppressPackageStartupMessages(stopifnot(library(pkg, quietly = TRUE, logical.return = TRUE, character.only = TRUE)))
options = matrix(c("otuphylfile","o",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
## Alpha diversity Edad
otug <- otuphyl
sampleg_df <- data.frame( group=factor(c(0,1) ))
rownames(sampleg_df) <- c("mean0", "mean1")
otugTable <- otu_table(otug)
otugTable <- otugTable[rowSums(otugTable==0) <=100,]
alphas <- suppressMessages(estimate_richness( otu_table(otugTable), measures = c("Chao1","Shannon","InvSimpson") ))
alphas <- alphas %>%
rownames_to_column(var = "Sample")
alphas <- alphas %>% select(-se.chao1) %>% pivot_longer(cols = c(Chao1,Shannon,InvSimpson)) %>% arrange(name,Sample)
alphas <- left_join(alphas, exper, by = c("Sample"="sampleId"))
alphas %>%
ggplot(aes(x = type, y = value, fill=type)) +
geom_boxplot(position = position_dodge(width=0.9)) +
facet_wrap(~name, nrow = 1, scales = "free") +
#scale_fill_manual(values = c("white","gray40")) +
theme_bw()
png(filename = "alpha_diversity.png", width = 1200, height = 1200)
print(alpha)
pkgs <- c("ggplot2","dplyr","tidyr", "getopt","limma","tibble","phyloseq","vegan")
for (pkg in pkgs) suppressPackageStartupMessages(stopifnot(library(pkg, quietly = TRUE, logical.return = TRUE, character.only = TRUE)))
options = matrix(c("otuphylfile","o",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
otug <- otuphyl
otugTable <- otu_table(otug)
otugTable <- otugTable[rowSums(otugTable==0) <=100,]
distancia <- vegdist(t(otugTable ), method = "bray", binary = TRUE)
beta <- betadiver(t(otugTable), "z")
mds <- metaMDS(distancia, k = 2)
mdspoints <- as.data.frame(mds$points) %>% rownames_to_column(var = "Sample")
mdspoints <- left_join(mdspoints,expert, by = c("Sample"="sampleId"))
mdspoints %>% ggplot(aes(x=MDS1, y=MDS2, color="type"))+
geom_point(aes(shape = gender), size = 3)+
geom_hline(yintercept = 0, colour= "gray50", linetype = "dashed")+
geom_vline(xintercept = 0, colour= "gray50", linetype = "dashed")+
theme_bw()
png(filename = "beta_diversity.png", width = 1200, height = 1200)
print(mdspoints)
pkgs <- c("ggplot2","dplyr","tidyr", "getopt","limma","tibble","phyloseq")
for (pkg in pkgs) suppressPackageStartupMessages(stopifnot(library(pkg, quietly = TRUE, logical.return = TRUE, character.only = TRUE)))
options = matrix(c("otuphylfile","o",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
p <- suppressMessages(psmelt(otuphylNorm))
p$Abundance <- p$Abundance*100
p <- suppressMessages(p %>% mutate(menor01 = ifelse(Abundance<1, 1, 0)) %>%
mutate(newOTU = ifelse(menor01 == 1, "ETC<1%", OTU) ) %>%
group_by(newOTU, group, Sample) %>% summarise(Abundance2 = sum(Abundance)))
names(p) <- c("OTU","group","Sample", "Abundance")
colores <- c('#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf')
colorRamps <- scales::colour_ramp(colores)
coloresRamp <- colorRamps(seq(0,1,length=length(unique(p$OTU)) ))
p %>% ggplot(aes_string(x = "Sample", y="Abundance", fill="OTU")) +
geom_bar(stat = "identity", position = "stack",
color = "black", show.legend = T, width = 0.5, size=0.01 ) +
theme_bw() +
scale_fill_manual(values= coloresRamp ) +
theme(axis.text.x = element_text(angle = 90),
legend.position = "bottom",
text = element_text(size=10),
legend.key.size = unit(0.3, "cm") ) +
ylab("Abundance (%)")+
guides(fill = guide_legend(ncol=3)) +
facet_wrap(~group, scales = "free_x", ncol = 3)
png(filename = "barplot_sample_and_group.png", width = 1200, height = 1200)
print(p)
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
summary(similaridad)
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
summary(similaridad)
library(phyloseq)
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
summary(similaridad)
View(otuphyl)
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
otug <- otuphyl
otugTable <- otu_table(otug)
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
summary(similaridad)
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  )%>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
```{r}
library(vegan)
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
summary(similaridad)
library(vegan)
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
metadata <- read.table(args$metadata, header = T , sep="\t")
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
summary(similaridad)
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
similaridad <- anosim( t(otugTable), grouping = factor(exper$type), distance = "bray" )
otug <- otuphyl
otugTable <- otu_table(otug)
otugTable
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
metadata <- read.table(args$metadata, header = T , sep="\t")
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray"
summary(similaridad)
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
metadata <- read.table(args$metadata, header = T , sep="\t")
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
metadata <- read.table(args$metadata, header = T , sep="\t")
load(args$otuphylfile)
library(vegan)
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
metadata <- read.table(args$metadata, header = T , sep="\t")
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
library(vegan)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
options = matrix(c("otuphylfile","o",2,"character","metadata","m",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
pkgs <- c("ggplot2","dplyr","tidyr", "getopt","limma","tibble","phyloseq","vegan")
for (pkg in pkgs) suppressPackageStartupMessages(stopifnot(library(pkg, quietly = TRUE, logical.return = TRUE, character.only = TRUE)))
options = matrix(c("otuphylfile","o",2,"character","metadata","m",2,"character"), byrow = TRUE, ncol = 4)
args=getopt(options)
if (length(args)==0) {
stop("Two files must be supplied (Otu file, metadata files)", call.=FALSE)
}
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
library(vegan)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
library(phyloseq)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
# combinaciones <- gtools::combinations(3, 2, c("L","M","S") ) %>% as.data.frame()
similaridad <- anosim( t(otugTable), grouping = factor(metadata$type), distance = "bray" )
summary(similaridad)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
load(args$otuphylfile)
metadata <- read.table(args$metadata, header = T , sep="\t")
otug <- otuphyl
otugTable <- otu_table(otug)
combinaciones <- combinations( length(unique(metadata$condition)), 2, unique(metadata$condition)  ) %>% as.data.frame()
install.packages("getopt")
install.packages("getopt")
install.packages("limma")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
browseVignettes("limma")
install.packages("tidyverse")
install.packages("getopt")
library(limma)
library(getopt)
library(tidyverse)
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
install.packages("tibble")
library(phyloseq)
install.packages("phyloseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
install.packages("kableExtra")
install.packages("vegan")
install.packages("vegan")
install.packages("gtools")
install.packages("DESeq2")
BiocManager::install("DESeq2")
install.packages("ape")
